esphome:
  name: $devicename
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # use_address: $address
  domain: .home

# Reduce log level as otherwise logs would be flooded with analog sensor readings
logger:
  level: DEBUG
  logs:
    sensor: INFO
    adc: INFO

api:
  encryption:
    key: !secret key

ota:
  password: !secret ota_password
  on_begin:
    then:
      - logger.log: "OTA start"

  on_end:
    then:
      - logger.log: "OTA end"

  on_error:
    then:
      - logger.log:
          format: "OTA update error %d"
          args: ["x"]

# mqtt:
#   broker: server.home
#   topic_prefix: esphome/${devicename}

time:
  - platform: sntp
    id: sntp_time

# Device Specific Config
binary_sensor:
  # Push Button (Toggles Relay When Pressed)
  - platform: gpio
    pin:
      number: GPIO3
      mode: INPUT_PULLUP
      inverted: true
    name: "${fullname} Button"
    on_press:
      - switch.toggle: relay
  - platform: status
    name: "${fullname} Server Status"

switch:
  # Relay (As Switch)
  - platform: gpio
    name: "${fullname}"
    icon: "mdi:power-socket-uk"
    pin: GPIO14
    id: relay
    restore_mode: "${restoreMode}"
    on_turn_on:
      - light.turn_on:
          id: led
          brightness: 100%
          transition_length: 0s
    on_turn_off:
      - light.turn_off:
          id: led
          transition_length: 0s
  # Restart
  - platform: restart
    name: ${fullname} Restart

sensor:
  # WiFi Signal Sensor
  - platform: wifi_signal
    name: "${fullname} WiFi Status"
    update_interval: 60s
  # Power Monitoring
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO4
    cf1_pin: GPIO05
    current_resistor: 0.00221
    voltage_divider: 940
    change_mode_every: 3
    update_interval: 3s
    voltage:
      name: "${fullname} Voltage"
      id: voltage
      unit_of_measurement: V
      accuracy_decimals: 1
    power:
      name: "${fullname} Power"
      id: power
      unit_of_measurement: W
      accuracy_decimals: 1
    current:
      name: "${fullname} Current"
      id: current
      unit_of_measurement: A
      accuracy_decimals: 1
  # Total daily energy sensor
  - platform: total_daily_energy
    name: "${fullname} Daily Energy"
    power_id: power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

text_sensor:
  # Device Activity State
  # e.g. shows as active if power reading above a certain threshold
  - platform: template
    name: "${fullname} Activity State"
    icon: "mdi:power-socket-uk"
    lambda: |-
      if (id(power).state >= 5) {
        return {"Active"};
      } else {
        return {"Idle"};
      }
    update_interval: 5s

# Relay State LED
output:
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO1
      inverted: true

light:
  - platform: monochromatic
    output: state_led
    id: led

status_led:
  pin:
    number: GPIO13
    inverted: True
